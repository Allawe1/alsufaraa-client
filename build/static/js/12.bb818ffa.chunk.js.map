{"version":3,"sources":["pages/productGatogary/Styles.jsx","pages/productGatogary/ProductCard.jsx","pages/productGatogary/Product.jsx","redux/actions/productGategory.js","pages/productGatogary/index.js"],"names":["useStyles","makeStyles","theme","main","marginTop","background","padding","position","textAlign","breakpoints","only","smallDivider","height","backgroundColor","width","display","margin","h2","fontSize","color","fontFamily","fontWeight","h1","bigDivider","overlaySmall","paddingTop","card","down","media","image","spacing","Width","Height","grid","paddingLeft","paddingRight","ProductCard","props","name","img","id","classes","Grid","item","xs","style","textDecoration","to","pathname","state","Card","className","title","src","product1","alt","Typography","connect","productGategorys","dispatch","getProductGategorys","a","api","data","type","payload","console","log","message","useState","isLoading","setLoading","useDispatch","useEffect","localStorage","clear","window","scrollTo","variant","Divider","SpinnerInfinity","size","thickness","speed","secondaryColor","container","justifyContent","alignItems","map","elem","key","_id","Product"],"mappings":"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","file":"static/js/12.bb818ffa.chunk.js","sourcesContent":["import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  main: {\r\n    marginTop: 550,\r\n    background: \"#edca82\",\r\n    padding: \"100px\",\r\n    position: \"relative\",\r\n    textAlign: \"center\",\r\n    [theme.breakpoints.only('xs')]: {\r\n      marginTop: 715,\r\n      padding : '90px 10px'\r\n     },\r\n     [`${theme.breakpoints.only('sm')} and (orientation: landscape)`]: {\r\n      marginTop: 0,\r\n      padding: \"50px \",\r\n      \r\n     },\r\n  },\r\n  smallDivider: {\r\n    height: \"3px\",\r\n    marginTop: \"25px\",\r\n    backgroundColor: \"#097770\",\r\n    width: \"60px\",\r\n    display: \"block\",\r\n    position: \"relative\",\r\n    margin: \"10px auto 20px\",\r\n  },\r\n  h2: {\r\n    fontSize: \"30px\",\r\n    color: \"c6a07c\",\r\n    fontFamily: \"Open Sans\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  h1: {\r\n    fontSize: \"36px\",\r\n    fontWeight: \"400\",\r\n    color: \"#30271c\",\r\n    fontFamily: \"Signika\",\r\n  },\r\n  bigDivider: {\r\n    height: \"3px\",\r\n    marginTop: \"25px\",\r\n    backgroundColor: \"#097770\",\r\n    width: \"170px\",\r\n    display: \"block\",\r\n    position: \"relative\",\r\n    margin: \"10px auto 20px\",\r\n  },\r\n  overlaySmall: {\r\n    textAlign: \"center\",\r\n    color: \"#c7a17a\",\r\n    fontSize: \"26px\",\r\n    fontFamily: \"Signika\",\r\n    fontWeight: \"600\",\r\n    paddingTop: \"20px\",\r\n  },\r\n  card: {\r\n    margin: \"auto\",\r\n    width: 400,\r\n    height: 300,\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      width: 300,\r\n      height: 250,\r\n    },\r\n  },\r\n  media: {\r\n    height: 300,\r\n    width : 400// 16:9\r\n  },\r\n  image: {\r\n    padding: theme.spacing(1),\r\n    margin: \"auto\",\r\n    display: \"display\",\r\n    width: 400,\r\n    height: 300,\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      Width: \"100%\",\r\n      Height: \"100%\",\r\n    },\r\n  },\r\n  grid: {\r\n    paddingLeft: \"180px\",\r\n    paddingRight: \"180px\",\r\n  },\r\n}));\r\n","import { Link } from \"react-router-dom\";\r\nimport { Card, Grid, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useStyles } from \"./Styles\";\r\nimport product1 from \"../../images/product1.jpg\";\r\n\r\nexport default function ProductCard(props) {\r\n  const { name, img, id } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid item xs=\"auto\" key={id}>\r\n      <Link\r\n        style={{ textDecoration: \"none\" }}\r\n        to={{\r\n          pathname: `/products/${name}`,\r\n          state: name,\r\n        }}\r\n      >\r\n        <Card className={classes.card}>\r\n          <img\r\n            title={img}\r\n            src={\r\n              img !== \"\"\r\n                ? `https://alsufaraa-client-zmcto.ondigitalocean.app/alsufaraa/images/${img}`\r\n                : product1\r\n            }\r\n            className={classes.media}\r\n            alt={img}\r\n          />\r\n        </Card>\r\n        <Typography className={classes.overlaySmall}>{name}</Typography>\r\n      </Link>\r\n    </Grid>\r\n  );\r\n}\r\n","import { Divider, Grid, Typography } from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useStyles } from \"./Styles\";\r\nimport { useDispatch, connect } from \"react-redux\";\r\nimport { getProductGategorys } from \"../../redux/actions/productGategory\";\r\nimport ProductCard from \"./ProductCard\";\r\nimport { useState } from \"react\";\r\nimport { SpinnerInfinity } from \"spinners-react\";\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    productGategorys: state.productGategorys,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getProductGategorys: () => dispatch(getProductGategorys()),\r\n  };\r\n};\r\n\r\nfunction Product(props) {\r\n  const [isLoading, setLoading] = useState(true);\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    localStorage.clear();\r\n    props.getProductGategorys();\r\n    if (props.productGategorys) {\r\n      setLoading(false);\r\n    } else {\r\n      setLoading(true);\r\n    }\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.main}>\r\n      <Typography variant=\"h2\" className={classes.h2}>\r\n        Welcome to our Products!\r\n      </Typography>\r\n      <Divider variant=\"inset\" className={classes.bigDivider} />\r\n      <Typography variant=\"h1\" className={classes.h1}>\r\n        Choose what you are looking for\r\n      </Typography>\r\n      <Divider variant=\"inset\" className={classes.smallDivider} />\r\n      {isLoading ? (\r\n        <SpinnerInfinity\r\n          size={100}\r\n          thickness={100}\r\n          speed={100}\r\n          color=\"rgba(57, 113, 172, 1)\"\r\n          secondaryColor=\"rgba(0, 0, 0, 0.44)\"\r\n        />\r\n      ) : (\r\n        <Grid container spacing={8} justifyContent=\"center\" alignItems=\"center\">\r\n          {props.productGategorys.map((elem) => (\r\n            <ProductCard {...elem} key={elem._id} />\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Product);\r\n","import * as api from \"../api\";\r\n\r\n\r\nexport const getProductGategorys = () => async (dispatch) => {\r\n  try {\r\n    const {data} = await api.fetchProductGategorys();\r\n    dispatch({ type: \"FETCH_ALL\", payload: data });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\nexport const getProductGategorysProduct = (name) => async (dispatch) => {\r\n  try {\r\n    const date = await api.fetchProductGategorysProduct(name);\r\n    dispatch({ type: \"FETCH_ALL_PRODUCT\", payload: date });\r\n  } catch (error) {\r\n    console.log(error.message);\r\n  }\r\n};\r\n","import Product from \"./Product.jsx\";\r\n\r\nexport default Product;\r\n"],"sourceRoot":""}